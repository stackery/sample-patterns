AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  Queue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:
        'Fn::Sub': '${AWS::StackName}-Queue'
      RedrivePolicy:
        deadLetterTargetArn:
          'Fn::GetAtt':
            - DLQ
            - Arn
        maxReceiveCount: 5
  Database:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      Engine: aurora
      EngineMode: serverless
      MasterUsername:
        'Fn::Sub': '{{resolve:secretsmanager:${DatabaseRootUserSecret}:SecretString:username}}'
      MasterUserPassword:
        'Fn::Sub': '{{resolve:secretsmanager:${DatabaseRootUserSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 256
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Ref: DatabaseSecurityGroup
  DatabaseSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription:
        'Fn::Sub':
          - 'Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets'
          - ResourceName: Database
      SubnetIds:
        Ref: DefaultVPCSubnets
      Tags:
        - Key: Name
          Value:
            'Fn::Sub':
              - 'Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets'
              - ResourceName: Database
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value:
            'Fn::Sub':
              - 'Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group'
              - ResourceName: Database
      VpcId:
        Ref: DefaultVPCId
  DatabaseRootUserSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description:
        'Fn::Sub':
          - 'Root user login info for Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}'
          - ResourceName: Database
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Name:
        'Fn::Sub': '/${EnvironmentTagName}/${StackTagName}/Database/RootUser'
  DatabaseRootUserSecretAttachment:
    Type: 'AWS::SecretsManager::SecretTargetAttachment'
    Properties:
      SecretId:
        Ref: DatabaseRootUserSecret
      TargetId:
        Ref: Database
      TargetType: 'AWS::RDS::DBCluster'
  Ingest:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        'Fn::Sub': '${AWS::StackName}-Ingest'
      Description:
        'Fn::Sub':
          - 'Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}'
          - ResourceName: Ingest
      CodeUri: src/ingest
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn:
              Ref: DatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - 'rds-data:BatchExecuteStatement'
                - 'rds-data:BeginTransaction'
                - 'rds-data:CommitTransaction'
                - 'rds-data:ExecuteStatement'
                - 'rds-data:RollbackTransaction'
              Resource:
                - 'Fn::Sub': 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}'
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue:
              'Fn::GetAtt':
                - Queue
                - Arn
            BatchSize: 1
      Environment:
        Variables:
          DB_ID:
            Ref: Database
          DB_ADDRESS:
            'Fn::GetAtt':
              - Database
              - Endpoint.Address
          DB_PORT:
            'Fn::GetAtt':
              - Database
              - Endpoint.Port
          DB_ARN:
            'Fn::Sub': 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}'
          DB_ROOT_USER_SECRET_ARN:
            Ref: DatabaseRootUserSecret
  DLQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:
        'Fn::Sub': '${AWS::StackName}-DLQ'
  HttpApi:
    Type: 'AWS::Serverless::HttpApi'
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title:
            'Fn::Sub': '${AWS::StackName}-HttpApi'
          version: '1.0'
        paths:
          /message:
            post:
              responses: {}
      FailOnWarnings: true
  Enqueue:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        'Fn::Sub': '${AWS::StackName}-Enqueue'
      Description:
        'Fn::Sub':
          - 'Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}'
          - ResourceName: Enqueue
      CodeUri: src/enqueue
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SQSSendMessagePolicy:
            QueueName:
              'Fn::GetAtt':
                - Queue
                - QueueName
      Environment:
        Variables:
          QUEUE_NAME:
            'Fn::GetAtt':
              - Queue
              - QueueName
          QUEUE_ARN:
            'Fn::GetAtt':
              - Queue
              - Arn
          QUEUE_URL:
            Ref: Queue
      Events:
        HttpApiPOSTmessage:
          Type: HttpApi
          Properties:
            Path: /message
            Method: POST
            ApiId:
              Ref: HttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: 'AWS::EC2::VPC::Id'
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)